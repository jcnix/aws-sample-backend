Resources:
  APIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'jcnix-api-dev'
  APIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - APIBucket
    Properties:
      Bucket: 'jcnix-api-dev'
      PolicyDocument:
        Statement:
          - Sid: 'Allow Jenkins to upload'
            Action:
              - 's3:List*'
              - 's3:Put*'
              - 's3:Delete*'
            Effect: Allow
            Resource: 
              - 'arn:aws:s3:::jcnix-api-dev'
              - 'arn:aws:s3:::jcnix-api-dev/*'
            Principal: 
              AWS: 'arn:aws:iam::965128151894:user/jenkins'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'lambda-role'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  Application:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      FunctionName: pizza-api
      Runtime: nodejs14.x
      Role: arn:aws:iam::965128151894:role/lambda-role
      Handler: app.handler
      Code: '../../bin'
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'pizza-api-gateway'
  ApiDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: api.jcnix.com
      CertificateArn: >-
        arn:aws:acm:us-east-1:965128151894:certificate/4efd51eb-512a-4061-88dd-30c57b66a7e0
  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: '{proxy+}'
  ProxyResourceANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "Application.Arn"
  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RestApi
    Properties:
      RestApiId: !Ref "RestApi"
      StageName: ProdStage
  ProdBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      BasePath: api
      DomainName: !Ref ApiDomain
      RestApiId: !Ref RestApi
      Stage: ProdStage
